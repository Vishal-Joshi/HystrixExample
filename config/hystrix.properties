# isolation strategy HystrixCommand.run() will use like THREAD or SEMAPHORE
hystrix.command.GetCurrencyRateCommand.execution.isolation.strategy=THREAD

# timeout for each thread
hystrix.command.GetCurrencyRateCommand.execution.isolation.thread.timeoutInMilliseconds=2000

# is circuitBreakerEnabled
hystrix.command.GetCurrencyRateCommand.circuitBreaker.enabled=true

# This property sets the minimum number of requests in a rolling window that will trip the circuit.
hystrix.command.GetCurrencyRateCommand.circuitBreaker.requestVolumeThreshold=20

# This property sets the amount of time, after tripping the circuit, to reject requests before allowing attempts
# again to determine if the circuit should again be closed.
hystrix.command.GetCurrencyRateCommand.circuitBreaker.sleepWindowInMilliseconds=5000

# This property sets the error percentage at or above which the circuit should trip open and start short-circuiting
# requests to fallback logic.
hystrix.command.GetCurrencyRateCommand.circuitBreaker.errorThresholdPercentage=50

# This property, if true, forces the circuit breaker into an open (tripped) state in which it will reject all requests.
hystrix.command.GetCurrencyRateCommand.circuitBreaker.forceOpen=false

# This property, if true, forces the circuit breaker into a closed state in which it will allow requests regardless
# of the error percentage.
hystrix.command.GetCurrencyRateCommand.circuitBreaker.forceClosed=false

# This property sets the time to wait, in milliseconds, between allowing health snapshots to be taken that calculate
# success and error percentages and affect circuit breaker status.
hystrix.command.GetCurrencyRateCommand.metrics.healthSnapshot.intervalInMilliseconds=500

# This property determines whether a call to HystrixCommand.getFallback() will be attempted when failure or rejection occurs.
hystrix.command.GetCurrencyRateCommand.fallback.enabled=false

# This property indicates whether HystrixCommand.getCacheKey() should be used with HystrixRequestCache to provide
# de-duplication functionality via request-scoped caching.
hystrix.command.GetCurrencyRateCommand.requestCache.enabled=true

## Assuming 5 requests per second
hystrix.threadpool.GetCurrencyRateCommand.coreSize=10